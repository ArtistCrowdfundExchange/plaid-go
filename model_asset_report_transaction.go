/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * API version: 2020-09-14_1.19.10
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package plaid

import (
	"encoding/json"
)

// AssetReportTransaction struct for AssetReportTransaction
type AssetReportTransaction struct {
	// Please use the `payment_channel` field, `transaction_type` will be deprecated in the future.  `digital:` transactions that took place online.  `place:` transactions that were made at a physical location.  `special:` transactions that relate to banks, e.g. fees or deposits.  `unresolved:` transactions that do not fit into the other three types. 
	TransactionType *string `json:"transaction_type,omitempty"`
	// The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive.
	TransactionId string `json:"transaction_id"`
	// The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts.
	AccountOwner NullableString `json:"account_owner"`
	// The ID of a posted transaction's associated pending transaction, where applicable.
	PendingTransactionId NullableString `json:"pending_transaction_id"`
	// When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled.
	Pending bool `json:"pending"`
	// The channel used to make a payment. `online:` transactions that took place online.  `in store:` transactions that were made at a physical location.  `other:` transactions that relate to banks, e.g. fees or deposits.  This field replaces the `transaction_type` field. 
	PaymentChannel string `json:"payment_channel"`
	PaymentMeta PaymentMeta `json:"payment_meta"`
	// The merchant name or transaction description.  If the `transactions` object was returned by a Transactions endpoint such as `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
	Name string `json:"name"`
	// The merchant name, as extracted by Plaid from the `name` field.
	MerchantName NullableString `json:"merchant_name"`
	Location Location `json:"location"`
	// The date that the transaction was authorized. Dates are returned in an ISO 8601 format ( `YYYY-MM-DD` ).
	AuthorizedDate NullableString `json:"authorized_date"`
	// Date and time when a transaction was authorized in ISO 8601 format ( `YYYY-MM-DDTHH:mm:ssZ` ).  This field is only populated for UK institutions. For institutions in other countries, will be `null`.
	AuthorizedDatetime NullableString `json:"authorized_datetime"`
	// For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an ISO 8601 format ( `YYYY-MM-DD` ).
	Date string `json:"date"`
	// Date and time when a transaction was posted in ISO 8601 format ( `YYYY-MM-DDTHH:mm:ssZ` ).  This field is only populated for UK institutions. For institutions in other countries, will be `null`.
	Datetime NullableString `json:"datetime"`
	// The ID of the category to which this transaction belongs. See [Categories](https://plaid.com/docs/#category-overview).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
	CategoryId NullableString `json:"category_id"`
	// A hierarchical array of the categories to which this transaction belongs. See [Categories](https://plaid.com/docs/#category-overview).  If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
	Category []string `json:"category"`
	// The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.  See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
	UnofficialCurrencyCode NullableString `json:"unofficial_currency_code"`
	// The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null.
	IsoCurrencyCode NullableString `json:"iso_currency_code"`
	// The settled value of the transaction, denominated in the account's currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
	Amount float32 `json:"amount"`
	// The ID of the account in which this transaction occurred.
	AccountId string `json:"account_id"`
	TransactionCode NullableTransactionCode `json:"transaction_code"`
	// The string returned by the financial institution to describe the transaction. For transactions returned by `/transactions/get`, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set `options.include_original_description` to `true`.
	OriginalDescription NullableString `json:"original_description"`
	// The date on which the transaction took place, in IS0 8601 format.
	DateTransacted NullableString `json:"date_transacted,omitempty"`
}

// NewAssetReportTransaction instantiates a new AssetReportTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetReportTransaction(transactionId string, accountOwner NullableString, pendingTransactionId NullableString, pending bool, paymentChannel string, paymentMeta PaymentMeta, name string, merchantName NullableString, location Location, authorizedDate NullableString, authorizedDatetime NullableString, date string, datetime NullableString, categoryId NullableString, category []string, unofficialCurrencyCode NullableString, isoCurrencyCode NullableString, amount float32, accountId string, transactionCode NullableTransactionCode, originalDescription NullableString) *AssetReportTransaction {
	this := AssetReportTransaction{}
	this.TransactionId = transactionId
	this.AccountOwner = accountOwner
	this.PendingTransactionId = pendingTransactionId
	this.Pending = pending
	this.PaymentChannel = paymentChannel
	this.PaymentMeta = paymentMeta
	this.Name = name
	this.MerchantName = merchantName
	this.Location = location
	this.AuthorizedDate = authorizedDate
	this.AuthorizedDatetime = authorizedDatetime
	this.Date = date
	this.Datetime = datetime
	this.CategoryId = categoryId
	this.Category = category
	this.UnofficialCurrencyCode = unofficialCurrencyCode
	this.IsoCurrencyCode = isoCurrencyCode
	this.Amount = amount
	this.AccountId = accountId
	this.TransactionCode = transactionCode
	this.OriginalDescription = originalDescription
	return &this
}

// NewAssetReportTransactionWithDefaults instantiates a new AssetReportTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetReportTransactionWithDefaults() *AssetReportTransaction {
	this := AssetReportTransaction{}
	return &this
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise.
func (o *AssetReportTransaction) GetTransactionType() string {
	if o == nil || o.TransactionType == nil {
		var ret string
		return ret
	}
	return *o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetTransactionTypeOk() (*string, bool) {
	if o == nil || o.TransactionType == nil {
		return nil, false
	}
	return o.TransactionType, true
}

// HasTransactionType returns a boolean if a field has been set.
func (o *AssetReportTransaction) HasTransactionType() bool {
	if o != nil && o.TransactionType != nil {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given string and assigns it to the TransactionType field.
func (o *AssetReportTransaction) SetTransactionType(v string) {
	o.TransactionType = &v
}

// GetTransactionId returns the TransactionId field value
func (o *AssetReportTransaction) GetTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetTransactionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TransactionId, true
}

// SetTransactionId sets field value
func (o *AssetReportTransaction) SetTransactionId(v string) {
	o.TransactionId = v
}

// GetAccountOwner returns the AccountOwner field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssetReportTransaction) GetAccountOwner() string {
	if o == nil || o.AccountOwner.Get() == nil {
		var ret string
		return ret
	}

	return *o.AccountOwner.Get()
}

// GetAccountOwnerOk returns a tuple with the AccountOwner field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportTransaction) GetAccountOwnerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccountOwner.Get(), o.AccountOwner.IsSet()
}

// SetAccountOwner sets field value
func (o *AssetReportTransaction) SetAccountOwner(v string) {
	o.AccountOwner.Set(&v)
}

// GetPendingTransactionId returns the PendingTransactionId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssetReportTransaction) GetPendingTransactionId() string {
	if o == nil || o.PendingTransactionId.Get() == nil {
		var ret string
		return ret
	}

	return *o.PendingTransactionId.Get()
}

// GetPendingTransactionIdOk returns a tuple with the PendingTransactionId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportTransaction) GetPendingTransactionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PendingTransactionId.Get(), o.PendingTransactionId.IsSet()
}

// SetPendingTransactionId sets field value
func (o *AssetReportTransaction) SetPendingTransactionId(v string) {
	o.PendingTransactionId.Set(&v)
}

// GetPending returns the Pending field value
func (o *AssetReportTransaction) GetPending() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Pending
}

// GetPendingOk returns a tuple with the Pending field value
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetPendingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Pending, true
}

// SetPending sets field value
func (o *AssetReportTransaction) SetPending(v bool) {
	o.Pending = v
}

// GetPaymentChannel returns the PaymentChannel field value
func (o *AssetReportTransaction) GetPaymentChannel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentChannel
}

// GetPaymentChannelOk returns a tuple with the PaymentChannel field value
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetPaymentChannelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PaymentChannel, true
}

// SetPaymentChannel sets field value
func (o *AssetReportTransaction) SetPaymentChannel(v string) {
	o.PaymentChannel = v
}

// GetPaymentMeta returns the PaymentMeta field value
func (o *AssetReportTransaction) GetPaymentMeta() PaymentMeta {
	if o == nil {
		var ret PaymentMeta
		return ret
	}

	return o.PaymentMeta
}

// GetPaymentMetaOk returns a tuple with the PaymentMeta field value
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetPaymentMetaOk() (*PaymentMeta, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PaymentMeta, true
}

// SetPaymentMeta sets field value
func (o *AssetReportTransaction) SetPaymentMeta(v PaymentMeta) {
	o.PaymentMeta = v
}

// GetName returns the Name field value
func (o *AssetReportTransaction) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AssetReportTransaction) SetName(v string) {
	o.Name = v
}

// GetMerchantName returns the MerchantName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssetReportTransaction) GetMerchantName() string {
	if o == nil || o.MerchantName.Get() == nil {
		var ret string
		return ret
	}

	return *o.MerchantName.Get()
}

// GetMerchantNameOk returns a tuple with the MerchantName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportTransaction) GetMerchantNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MerchantName.Get(), o.MerchantName.IsSet()
}

// SetMerchantName sets field value
func (o *AssetReportTransaction) SetMerchantName(v string) {
	o.MerchantName.Set(&v)
}

// GetLocation returns the Location field value
func (o *AssetReportTransaction) GetLocation() Location {
	if o == nil {
		var ret Location
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetLocationOk() (*Location, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *AssetReportTransaction) SetLocation(v Location) {
	o.Location = v
}

// GetAuthorizedDate returns the AuthorizedDate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssetReportTransaction) GetAuthorizedDate() string {
	if o == nil || o.AuthorizedDate.Get() == nil {
		var ret string
		return ret
	}

	return *o.AuthorizedDate.Get()
}

// GetAuthorizedDateOk returns a tuple with the AuthorizedDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportTransaction) GetAuthorizedDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthorizedDate.Get(), o.AuthorizedDate.IsSet()
}

// SetAuthorizedDate sets field value
func (o *AssetReportTransaction) SetAuthorizedDate(v string) {
	o.AuthorizedDate.Set(&v)
}

// GetAuthorizedDatetime returns the AuthorizedDatetime field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssetReportTransaction) GetAuthorizedDatetime() string {
	if o == nil || o.AuthorizedDatetime.Get() == nil {
		var ret string
		return ret
	}

	return *o.AuthorizedDatetime.Get()
}

// GetAuthorizedDatetimeOk returns a tuple with the AuthorizedDatetime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportTransaction) GetAuthorizedDatetimeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthorizedDatetime.Get(), o.AuthorizedDatetime.IsSet()
}

// SetAuthorizedDatetime sets field value
func (o *AssetReportTransaction) SetAuthorizedDatetime(v string) {
	o.AuthorizedDatetime.Set(&v)
}

// GetDate returns the Date field value
func (o *AssetReportTransaction) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *AssetReportTransaction) SetDate(v string) {
	o.Date = v
}

// GetDatetime returns the Datetime field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssetReportTransaction) GetDatetime() string {
	if o == nil || o.Datetime.Get() == nil {
		var ret string
		return ret
	}

	return *o.Datetime.Get()
}

// GetDatetimeOk returns a tuple with the Datetime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportTransaction) GetDatetimeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Datetime.Get(), o.Datetime.IsSet()
}

// SetDatetime sets field value
func (o *AssetReportTransaction) SetDatetime(v string) {
	o.Datetime.Set(&v)
}

// GetCategoryId returns the CategoryId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssetReportTransaction) GetCategoryId() string {
	if o == nil || o.CategoryId.Get() == nil {
		var ret string
		return ret
	}

	return *o.CategoryId.Get()
}

// GetCategoryIdOk returns a tuple with the CategoryId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportTransaction) GetCategoryIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CategoryId.Get(), o.CategoryId.IsSet()
}

// SetCategoryId sets field value
func (o *AssetReportTransaction) SetCategoryId(v string) {
	o.CategoryId.Set(&v)
}

// GetCategory returns the Category field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *AssetReportTransaction) GetCategory() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportTransaction) GetCategoryOk() (*[]string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *AssetReportTransaction) SetCategory(v []string) {
	o.Category = v
}

// GetUnofficialCurrencyCode returns the UnofficialCurrencyCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssetReportTransaction) GetUnofficialCurrencyCode() string {
	if o == nil || o.UnofficialCurrencyCode.Get() == nil {
		var ret string
		return ret
	}

	return *o.UnofficialCurrencyCode.Get()
}

// GetUnofficialCurrencyCodeOk returns a tuple with the UnofficialCurrencyCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportTransaction) GetUnofficialCurrencyCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnofficialCurrencyCode.Get(), o.UnofficialCurrencyCode.IsSet()
}

// SetUnofficialCurrencyCode sets field value
func (o *AssetReportTransaction) SetUnofficialCurrencyCode(v string) {
	o.UnofficialCurrencyCode.Set(&v)
}

// GetIsoCurrencyCode returns the IsoCurrencyCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssetReportTransaction) GetIsoCurrencyCode() string {
	if o == nil || o.IsoCurrencyCode.Get() == nil {
		var ret string
		return ret
	}

	return *o.IsoCurrencyCode.Get()
}

// GetIsoCurrencyCodeOk returns a tuple with the IsoCurrencyCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportTransaction) GetIsoCurrencyCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsoCurrencyCode.Get(), o.IsoCurrencyCode.IsSet()
}

// SetIsoCurrencyCode sets field value
func (o *AssetReportTransaction) SetIsoCurrencyCode(v string) {
	o.IsoCurrencyCode.Set(&v)
}

// GetAmount returns the Amount field value
func (o *AssetReportTransaction) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetAmountOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *AssetReportTransaction) SetAmount(v float32) {
	o.Amount = v
}

// GetAccountId returns the AccountId field value
func (o *AssetReportTransaction) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *AssetReportTransaction) GetAccountIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *AssetReportTransaction) SetAccountId(v string) {
	o.AccountId = v
}

// GetTransactionCode returns the TransactionCode field value
// If the value is explicit nil, the zero value for TransactionCode will be returned
func (o *AssetReportTransaction) GetTransactionCode() TransactionCode {
	if o == nil || o.TransactionCode.Get() == nil {
		var ret TransactionCode
		return ret
	}

	return *o.TransactionCode.Get()
}

// GetTransactionCodeOk returns a tuple with the TransactionCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportTransaction) GetTransactionCodeOk() (*TransactionCode, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TransactionCode.Get(), o.TransactionCode.IsSet()
}

// SetTransactionCode sets field value
func (o *AssetReportTransaction) SetTransactionCode(v TransactionCode) {
	o.TransactionCode.Set(&v)
}

// GetOriginalDescription returns the OriginalDescription field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssetReportTransaction) GetOriginalDescription() string {
	if o == nil || o.OriginalDescription.Get() == nil {
		var ret string
		return ret
	}

	return *o.OriginalDescription.Get()
}

// GetOriginalDescriptionOk returns a tuple with the OriginalDescription field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportTransaction) GetOriginalDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OriginalDescription.Get(), o.OriginalDescription.IsSet()
}

// SetOriginalDescription sets field value
func (o *AssetReportTransaction) SetOriginalDescription(v string) {
	o.OriginalDescription.Set(&v)
}

// GetDateTransacted returns the DateTransacted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssetReportTransaction) GetDateTransacted() string {
	if o == nil || o.DateTransacted.Get() == nil {
		var ret string
		return ret
	}
	return *o.DateTransacted.Get()
}

// GetDateTransactedOk returns a tuple with the DateTransacted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssetReportTransaction) GetDateTransactedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DateTransacted.Get(), o.DateTransacted.IsSet()
}

// HasDateTransacted returns a boolean if a field has been set.
func (o *AssetReportTransaction) HasDateTransacted() bool {
	if o != nil && o.DateTransacted.IsSet() {
		return true
	}

	return false
}

// SetDateTransacted gets a reference to the given NullableString and assigns it to the DateTransacted field.
func (o *AssetReportTransaction) SetDateTransacted(v string) {
	o.DateTransacted.Set(&v)
}
// SetDateTransactedNil sets the value for DateTransacted to be an explicit nil
func (o *AssetReportTransaction) SetDateTransactedNil() {
	o.DateTransacted.Set(nil)
}

// UnsetDateTransacted ensures that no value is present for DateTransacted, not even an explicit nil
func (o *AssetReportTransaction) UnsetDateTransacted() {
	o.DateTransacted.Unset()
}

func (o AssetReportTransaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TransactionType != nil {
		toSerialize["transaction_type"] = o.TransactionType
	}
	if true {
		toSerialize["transaction_id"] = o.TransactionId
	}
	if true {
		toSerialize["account_owner"] = o.AccountOwner.Get()
	}
	if true {
		toSerialize["pending_transaction_id"] = o.PendingTransactionId.Get()
	}
	if true {
		toSerialize["pending"] = o.Pending
	}
	if true {
		toSerialize["payment_channel"] = o.PaymentChannel
	}
	if true {
		toSerialize["payment_meta"] = o.PaymentMeta
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["merchant_name"] = o.MerchantName.Get()
	}
	if true {
		toSerialize["location"] = o.Location
	}
	if true {
		toSerialize["authorized_date"] = o.AuthorizedDate.Get()
	}
	if true {
		toSerialize["authorized_datetime"] = o.AuthorizedDatetime.Get()
	}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["datetime"] = o.Datetime.Get()
	}
	if true {
		toSerialize["category_id"] = o.CategoryId.Get()
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if true {
		toSerialize["unofficial_currency_code"] = o.UnofficialCurrencyCode.Get()
	}
	if true {
		toSerialize["iso_currency_code"] = o.IsoCurrencyCode.Get()
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["account_id"] = o.AccountId
	}
	if true {
		toSerialize["transaction_code"] = o.TransactionCode.Get()
	}
	if true {
		toSerialize["original_description"] = o.OriginalDescription.Get()
	}
	if o.DateTransacted.IsSet() {
		toSerialize["date_transacted"] = o.DateTransacted.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAssetReportTransaction struct {
	value *AssetReportTransaction
	isSet bool
}

func (v NullableAssetReportTransaction) Get() *AssetReportTransaction {
	return v.value
}

func (v *NullableAssetReportTransaction) Set(val *AssetReportTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetReportTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetReportTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetReportTransaction(val *AssetReportTransaction) *NullableAssetReportTransaction {
	return &NullableAssetReportTransaction{value: val, isSet: true}
}

func (v NullableAssetReportTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetReportTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


